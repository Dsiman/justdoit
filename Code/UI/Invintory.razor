@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent
@namespace Sandbox

<style>
.inventory-window {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: #333;
    border: 1px solid #555; /* Changed from % to px */
    border-radius: 8px; /* Changed from % to px */
    display: flex;
    flex-direction: column;
    padding: 1px;
    box-shadow: 0 0 10px rgba(0,0,0,0.5); /* Changed from % to px */
    font-family: 'Poppins', sans-serif;
    min-width: 300px;
    z-index: 100;
}

/* Top Bar - added full styling */
.inventory-draggable-bar {
    width: 100%;
    display: flex;
    text-align: center;
    cursor: move;
    background-color: #444;
    border-bottom: 1px solid #555;
    padding: 8px 10px;
    border-top-left-radius: 6px;
    border-top-right-radius: 6px;
    align-items: center;
}

.inventory-draggable {
    flex-grow: 1;
    color: #aaa;
    font-size: 14px;
    letter-spacing: 1px;
    padding: 2px 0;
    overflow: hidden;
    text-overflow: ellipsis;
}

.inventory-sort-button, 
.inventory-close-button {
    width: 28px;
    height: 28px;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #555;
    border-radius: 4px;
    margin-left: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-weight: bold;
    border: 1px solid #666;
}

.inventory-sort-button:hover {
    background-color: #666;
    transform: scale(1.05);
}

.inventory-close-button {
    background-color: #822;
    color: #ff9999;
}

.inventory-close-button:hover {
    background-color: #a33;
    transform: scale(1.1);
}

/* Grid container - added scrolling and sizing */
.inventory-grid-container {
    padding: 15px;
    background-color: #2a2a2a;
    border-radius: 6px;
    margin-top: 5px;
    max-height: 70vh;
}

/* Existing grid styles - good as is */
.inventory-grid {
    justify-content: center;
    align-items: center;
    display: flex;
    flex-wrap: wrap;
    margin-bottom: 15px;
    background-color: #444;
    padding: 5px;
    border-radius: 5px;
    position: relative;
}

    .cell {
        width: 50px;
        height: 50px;
        margin-right: 2px;
        margin-bottom: 2px;
        background-color: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        transition: all 0.2s ease;
        
        &:hover {
            background-color: rgba(100, 200, 255, 0.3);
            cursor: pointer;
        }
        
        &[selected] {
            background-color: rgba(255, 255, 100, 0.4);
        }
    }

    .item {
        position: absolute;
        z-index: 10;
        padding: 2px;
        pointer-events: none;
    }

    .item-content {
        width: 100%;
        height: 100%;
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;
        transform-origin: center;
        display: flex;
        justify-content: center;
        align-items: center;
        transition: all 0.2s ease;
        pointer-events: auto;
        
        &:hover {
            border: 2px solid gold;
            cursor: pointer;
        }
        
        &[selected] {
            border: 3px solid yellow;
            box-shadow: 0 0 10px yellow;
        }
    }

    .placeholder {
        background-color: rgba(100, 200, 100, 0.5);
        color: white;
        font-size: 12px;
        text-align: center;
        padding: 5px;
        border-radius: 3px;
        word-break: break-all;
    }

</style>

<root>
    <div class="inventory-window">
        <div class="inventory-draggable-bar">
            <div class="inventory-draggable">//////////////////////////////////////////////////</div>
            <div class="inventory-sort-button">=</div>
            <div class="inventory-close-button">X</div>
        </div>
        <div class="inventory-grid-container">
            <div class="inventory-grid" style="width: @GetGridWidth()px; height: @GetGridHeight()px;">
                @for (int row = 0; row < Rows; row++)
                {
                    for (int col = 0; col < Columns; col++)
                    {
                        <div class="cell" 
                            data-row="@row" 
                            data-col="@col"
                            onmouseover=@(() => HighlightCell(row, col))
                            onmouseout=@(() => ClearHighlights())
                            onclick=@(() => HandleCellClick(row, col))>
                        </div>
                    }
                }

                @foreach (var item in Items)
                {
                    var rotatedGrid = Target.GetRotatedGrid(item.itemShape.Grid, item.Rotation);
                    int itemRows = rotatedGrid.GetLength(0);
                    int itemCols = rotatedGrid.GetLength(1);
                    
                    <div class="item" 
                        style="top: @(item.Position.X * 52)px; 
                                left: @(item.Position.Y * 52)px;
                                width: @(itemCols * 50 + (itemCols - 1) * 2)px;
                                height: @(itemRows * 50 + (itemRows - 1) * 2)px;">
                        @if (item.texture != null)
                        {
                            <div class="item-content" 
                                style="background-image: url('@item.texture.ResourcePath');
                                        transform: rotate(@(item.Rotation)deg);">
                            </div>
                        }
                        else
                        {
                            <div class="item-content placeholder"
                                style="transform: rotate(@(item.Rotation)deg);">
                                @item.itemToStore.Name
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
        </div>
</root>

@code {
    [Property] public Storeable Target { get; set; }
    private int Rows => Target?.GetGridSize().rows ?? 10;
    private int Columns => Target?.GetGridSize().cols ?? 10;
    private IEnumerable<StoredItem> Items => Target?.GetItems() ?? Enumerable.Empty<StoredItem>();
    private IntVector2? SelectedCell = null;
    private StoredItem SelectedItem = null;

    private int GetGridWidth() => Columns * 52 - 2;
    private int GetGridHeight() => Rows * 52 - 2;

    protected override int BuildHash() => System.HashCode.Combine(
        Target, 
        Rows, 
        Columns,
        Items.Count(),
        Items.Select(i => System.HashCode.Combine(i.Position.X, i.Position.Y, i.Rotation))
    );

    private void HighlightCell(int row, int col)
    {
        SelectedCell = new IntVector2(row, col);
        SelectedItem = Target.GetItemAt(row, col);
    }

    private void ClearHighlights()
    {
        SelectedCell = null;
        SelectedItem = null;
    }

    private void HandleCellClick(int row, int col)
    {
        SelectedCell = new IntVector2(row, col);
        SelectedItem = Target.GetItemAt(row, col);
    }

    private void RotateSelected()
    {
        if (SelectedItem == null) return;
        
        int newRotation = (SelectedItem.Rotation + 90) % 360;
        var position = SelectedItem.Position;
        
        Target.RemoveItem(SelectedItem);
        if (Target.TryAddItem(SelectedItem, position.X, position.Y, newRotation))
        {
            Log.Info("Item rotated successfully");
        }
        else
        {
            Target.TryAddItem(SelectedItem, position.X, position.Y, SelectedItem.Rotation);
            Log.Info("Cannot rotate item in current position");
        }
    }

    private void TakeSelected()
    {
        if (SelectedItem != null)
        {
            Target.RemoveItem(SelectedItem);
            Log.Info($"Taken: {SelectedItem.itemToStore.Name}");
            SelectedItem = null;
        }
    }
}